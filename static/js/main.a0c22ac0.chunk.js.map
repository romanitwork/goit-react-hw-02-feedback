{"version":3,"sources":["components/feedback/Feedback.js","components/statistics/Statistics.js","components/section/Section.js","components/notification/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Feedback","onLeaveFeedback","name","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleClickIncrement","event","preventDefault","target","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","totalAmount","this","totalPercentage","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+PAqBeA,EAlBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAClB,OACE,oCACE,qDACA,4BAAQC,KAAK,OAAOC,KAAK,SAASC,QAASH,GAA3C,QAGA,4BAAQC,KAAK,UAAUC,KAAK,SAASC,QAASH,GAA9C,WAGA,4BAAQC,KAAK,MAAMC,KAAK,SAASC,QAASH,GAA1C,OAGA,4CCISI,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,oCACE,uCAAaJ,GACb,6BACA,0CAAgBC,GAChB,6BACA,sCAAYC,GACZ,6BACA,wCAAcC,GACd,6BACA,oDAA0BC,EAA1B,QCFSC,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICAQC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,8BAAOA,IC6DDC,E,2MA1DbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPU,qBAAuB,SAAAC,GACrBA,EAAMC,iBADwB,IAEtBlB,EAASiB,EAAME,OAAfnB,KACR,EAAKoB,UAAS,SAAAC,GAAI,sBACfrB,EAAOqB,EAAKrB,GAAQ,MAEvB,EAAKsB,qBACL,EAAKC,mC,EAGPD,mBAAqB,SAAAL,GAAU,IAAD,EACG,EAAKF,MAEpC,OAH4B,EACpBX,KADoB,EACdC,QADc,EACLC,K,EAKzBiB,gCAAkC,SAAAN,GAMhC,OALiB,EAAKF,MAAdX,KAEE,EAAKkB,qBACb,KACAE,W,wEAKF,IAAMC,EAAcC,KAAKJ,qBACnBK,EAAkBD,KAAKH,kCAFtB,EAGwBG,KAAKX,MAA5BX,EAHD,EAGCA,KAAMC,EAHP,EAGOA,QAASC,EAHhB,EAGgBA,IAEvB,OACE,kBAAC,EAAD,CAASI,MAAM,IACb,kBAAC,EAAD,CACEX,gBAAiB2B,KAAKV,uBAEvBZ,GAAQC,GAAWC,EAClB,kBAAC,EAAD,KACA,kBAAC,EAAD,CACEF,KAAMsB,KAAKX,MAAMX,KACjBC,QAASqB,KAAKX,MAAMV,QACpBC,IAAKoB,KAAKX,MAAMT,IAChBC,MAAOkB,EACPjB,mBAAoBmB,KAItB,kBAAC,EAAD,CAAcd,QAAQ,2B,GApDde,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,a","file":"static/js/main.a0c22ac0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Feedback = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <h2>Please leave feedback</h2>\r\n      <button name=\"good\" type=\"button\" onClick={onLeaveFeedback}>\r\n        Good\r\n      </button>\r\n      <button name=\"neutral\" type=\"button\" onClick={onLeaveFeedback}>\r\n        Neutral\r\n      </button>\r\n      <button name=\"bad\" type=\"button\" onClick={onLeaveFeedback}>\r\n        Bad\r\n      </button>\r\n      <h2>Statistics</h2>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Feedback;\r\n\r\n","import React from \"react\";\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <span>Good: {good}</span>\r\n      <br />\r\n      <span>Neutral: {neutral}</span>\r\n      <br />\r\n      <span>Bad: {bad}</span>\r\n      <br />\r\n      <span>Total: {total}</span>\r\n      <br />\r\n      <span>Positive feedback: {positivePercentage} %</span>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Statistics;","import React from \"react\";\r\n\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n  return <span>{message}</span>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport Feedback from \"./components/feedback/Feedback\";\nimport Statistics from \"./components/statistics/Statistics\";\nimport Section from \"./components/section/Section\";\nimport Notification from \"./components/notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  handleClickIncrement = event => {\n    event.preventDefault();\n    const { name } = event.target;\n    this.setState(prev => ({\n      [name]: prev[name] + 1\n    }));\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = event => {\n    const { good, neutral, bad } = this.state;\n    const totalAmount = good + neutral + bad;\n    return totalAmount;\n  };\n\n  countPositiveFeedbackPercentage = event => {\n    const { good } = this.state;\n    const totalPercentage = (\n      (good / this.countTotalFeedback()) *\n      100\n    ).toFixed();\n    return totalPercentage;\n  };\n\n  render() {\n    const totalAmount = this.countTotalFeedback();\n    const totalPercentage = this.countPositiveFeedbackPercentage();\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <Section title=\"\">\n        <Feedback\n          onLeaveFeedback={this.handleClickIncrement}\n        ></Feedback>\n        {good || neutral || bad ? (\n          <Section>\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={totalAmount}\n            positivePercentage={totalPercentage}\n          />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}